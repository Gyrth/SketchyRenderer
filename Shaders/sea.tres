[gd_resource type="Shader" format=3 uid="uid://4acw3ntwxlq"]

[resource]
code = "shader_type spatial;

render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx, unshaded;

uniform vec4 albedo : source_color = vec4(0.001, 0.001, 0.001, 1.0);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;

void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	
	uv1_power_normal = pow(abs(NORMAL), vec3(uv1_blend_sharpness));
	// Make the triplanar waves position based on the object position, but 
	// the object scale does not change the scale of the wave size.
	vec3 model_scale = vec3(length(MODEL_MATRIX[0]), length(MODEL_MATRIX[1]), length(MODEL_MATRIX[2]));
	uv1_triplanar_pos = VERTEX * model_scale * uv1_scale + uv1_offset;
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	float curve = 0.1 * sin((9.25 * uv1_triplanar_pos.x) + (2.0 * TIME));
	float shape = step(uv1_triplanar_pos.y - 0.0, curve);
	ALBEDO = albedo.rgb;
	
	if(shape < 0.5){
		discard;
	}
}
"
